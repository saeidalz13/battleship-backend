// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: analytics.sql

package sqlc

import (
	"context"

	"github.com/sqlc-dev/pqtype"
)

const getGamesCreatedCount = `-- name: GetGamesCreatedCount :one
SELECT games_created FROM game_server_analytics WHERE server_ip = $1
`

func (q *Queries) GetGamesCreatedCount(ctx context.Context, serverIp pqtype.Inet) (int64, error) {
	row := q.db.QueryRowContext(ctx, getGamesCreatedCount, serverIp)
	var games_created int64
	err := row.Scan(&games_created)
	return games_created, err
}

const getRematchCalledCount = `-- name: GetRematchCalledCount :one
SELECT rematch_called FROM game_server_analytics WHERE server_ip = $1
`

func (q *Queries) GetRematchCalledCount(ctx context.Context, serverIp pqtype.Inet) (int64, error) {
	row := q.db.QueryRowContext(ctx, getRematchCalledCount, serverIp)
	var rematch_called int64
	err := row.Scan(&rematch_called)
	return rematch_called, err
}

const incrementGamesCreatedCount = `-- name: IncrementGamesCreatedCount :exec
INSERT INTO game_server_analytics (server_ip, games_created, last_updated)
VALUES ($1, 1, CURRENT_TIMESTAMP) ON CONFLICT (server_ip) DO
UPDATE
SET games_created = game_server_analytics.games_created + 1,
    last_updated = CURRENT_TIMESTAMP
`

func (q *Queries) IncrementGamesCreatedCount(ctx context.Context, serverIp pqtype.Inet) error {
	_, err := q.db.ExecContext(ctx, incrementGamesCreatedCount, serverIp)
	return err
}

const incrementRematchCalledCount = `-- name: IncrementRematchCalledCount :exec
INSERT INTO game_server_analytics (server_ip, rematch_called, last_updated)
VALUES ($1, 1, CURRENT_TIMESTAMP) ON CONFLICT (server_ip) DO
UPDATE
SET rematch_called = game_server_analytics.rematch_called + 1,
    last_updated = CURRENT_TIMESTAMP
`

func (q *Queries) IncrementRematchCalledCount(ctx context.Context, serverIp pqtype.Inet) error {
	_, err := q.db.ExecContext(ctx, incrementRematchCalledCount, serverIp)
	return err
}
